version: "3.7"

networks:
   default:
      external:
  # The network should be the same as TRAEFIK network
         name: traefik-global-proxy

volumes:
  postgres_data:
    name: ${PROJECT_NAME}_postgres_data
  geodatadir:
    name: ${PROJECT_NAME}_geodatadir
  pgdumps:
    name: ${PROJECT_NAME}_pgdumps

services:

  client:
    image: ${DOCKER_ID}/${PROJECT_NAME}:client-${PROJECT_VERSION}
    build:
      dockerfile: Dockerfile
      context: ./app/client
    volumes:
      - /app/node_modules
      - ./app/client:/app
    container_name: ${PROJECT_NAME}_client
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.${PROJECT_NAME}_client.loadbalancer.server.port=80"
      - "traefik.http.routers.${PROJECT_NAME}_client.rule=Host(`${DOMAIN_NAME}`) && PathPrefix(`/`)"
      - "traefik.http.routers.${PROJECT_NAME}_client.entrypoints=websecure"
      - "traefik.http.routers.${PROJECT_NAME}_client.tls.certresolver=myhttpchallenge"
      - "traefik.http.routers.${PROJECT_NAME}_client.tls=true"

  geoserver:
    image: ${DOCKER_ID}/${PROJECT_NAME}:geoserver-${PROJECT_VERSION}
    build: ./app/geoserver
    container_name: ${PROJECT_NAME}_geoserver
    volumes:
      - geodatadir:/geodatadir/
    environment:
      - INITIAL_MEMORY=${INITIAL_MEMORY}
      - MAXIMUM_MEMORY=${MAXIMUM_MEMORY}
      - HTTPS_HOST=${DOMAIN_NAME}
      - HTTPS_PORT=443
      - HTTP_HOST= #localhost
      - HTTP_PORT= #80
      - ADMIN_USERNAME=${ADMIN_USERNAME}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.${PROJECT_NAME}_geoserver.loadBalancer.server.port=8080"
      - "traefik.http.routers.${PROJECT_NAME}_geoserver.rule=Host(`${DOMAIN_NAME}`) && PathPrefix(`/geoserver`)"
      - "traefik.http.routers.${PROJECT_NAME}_geoserver.entrypoints=websecure"
      - "traefik.http.routers.${PROJECT_NAME}_geoserver.tls.certresolver=myhttpchallenge"
      - "traefik.http.routers.${PROJECT_NAME}_geoserver.tls=true"
    depends_on:
      - db
    restart: on-failure

  db:
    image: ${DOCKER_ID}/${PROJECT_NAME}:db-${PROJECT_VERSION}
    build: ./app/database
    container_name: ${PROJECT_NAME}_db
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB_NAME=${PROJECT_NAME}
      - DATABASE_URL=postgis://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${PROJECT_NAME}
    volumes:
      - postgres_data:/var/lib/postgresql/data/
      # uncomment to enable remote connections to postgres
    ports:
      - "${POSTGRES_OUTER_PORT}:5432"
    restart: on-failure

  api:
    image: ${DOCKER_ID}/${PROJECT_NAME}:api-${PROJECT_VERSION}
    build:
      context: ./app/api
    container_name: ${PROJECT_NAME}_api
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB_NAME=${PROJECT_NAME}
      - S3_ACCESS_KEY=${S3_ACCESS_KEY}
      - S3_SECRET_KEY=${S3_SECRET_KEY}
      - S3_REGION=${S3_REGION}
      - S3_BUCKET=${S3_BUCKET}
      - AWS_CLOUDFRONT_URL=${AWS_CLOUDFRONT_URL}
    volumes:
      - /app/node_modules
      - ./app/api:/app
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.${PROJECT_NAME}_api.rule=Host(`${DOMAIN_NAME}`) && PathPrefix(`/api`)"
      - "traefik.http.routers.${PROJECT_NAME}_api.entrypoints=websecure"
      - "traefik.http.routers.${PROJECT_NAME}_api.tls.certresolver=myhttpchallenge"
      - "traefik.http.routers.${PROJECT_NAME}_api.tls=true"
      - "traefik.http.services.${PROJECT_NAME}_api.loadBalancer.server.port=3000"

  pgdumper:
    image: ${DOCKER_ID}/${PROJECT_NAME}:pgdumper-${PROJECT_VERSION}
    build: ./app/pgdumper
    container_name: ${PROJECT_NAME}_pgdumper
    volumes:
      - pgdumps:/pgdumps/
    restart: on-failure
    environment:
      - DATABASE=${PROJECT_NAME}
      - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${PROJECT_NAME}

  rclone:
    image: ${DOCKER_ID}/${PROJECT_NAME}:rclone-${PROJECT_VERSION}
    build: ./app/rclone
    container_name: ${PROJECT_NAME}_rclone
    environment:
      - S3_ACCESS_KEY=${S3_ACCESS_KEY}
      - S3_SECRET_KEY=${S3_SECRET_KEY}
      - S3_REGION=${S3_REGION}
      - S3_BUCKET=${S3_BUCKET}
    volumes:
      - pgdumps:/pgdumps/
      - geodatadir:/geodatadir/
    restart: on-failure
