version: "3.7"

networks:
   proxy_dev:
    name: traefik-global-proxy-dev
   socket_proxy_dev:
    name: global-socket-proxy-dev

volumes:
  postgres_data:
    name: ${COMPOSE_PROJECT_NAME}_postgres_data
  geodatadir:
    name: ${COMPOSE_PROJECT_NAME}_geodatadir
  pgdumps:
    name: ${COMPOSE_PROJECT_NAME}_pgdumps
# docker-compose -f docker-compose.dev.yaml up -d
services:
  socket-proxy:
    image: tecnativa/docker-socket-proxy
    container_name: ${COMPOSE_PROJECT_NAME}_socket-proxy
    privileged: yes
    environment:
      - CONTAINERS=1
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - socket_proxy_dev
    restart: always

  traefik:
    image: traefik:v2.3.5
    container_name: ${COMPOSE_PROJECT_NAME}_traefik
    ports:
      - 80:80
    depends_on:
      - socket-proxy
    entrypoint:
      - /entrypoint-shim.sh
    command:
      - "--providers.docker=true"
      - "--providers.docker.endpoint=tcp://socket-proxy:2375"
      - "--providers.docker.network=proxy_dev"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.file.filename=/etc/traefik/config.yml"
      - "--entrypoints.web.address=:80"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.entrypoints=web"
      - "traefik.http.routers.traefik.middlewares=traefik-auth"
      - "traefik.http.routers.traefik.service=api@internal"
    volumes:
      - ./app/traefik/entrypoint-shim.sh:/entrypoint-shim.sh
      - ./app/traefik/config.yml:/etc/traefik/config.yml
    networks:
      - proxy_dev
      - socket_proxy_dev
    restart: always

  client:
    image: ${DOCKER_ID}/${COMPOSE_PROJECT_NAME}:client-${PROJECT_VERSION}
    build:
      dockerfile: Dockerfile
      context: ./app/client
    container_name: ${COMPOSE_PROJECT_NAME}_client
    hostname: ${COMPOSE_PROJECT_NAME}_client
    networks:
      - proxy_dev
    volumes:
      - /app/node_modules
      - ./app/client:/app
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.${COMPOSE_PROJECT_NAME}_client.loadbalancer.server.port=80"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}_client.rule=Host(`${DOMAIN_NAME}`) && PathPrefix(`/`)"

  geoserver:
    image: ${DOCKER_ID}/${COMPOSE_PROJECT_NAME}:geoserver-${PROJECT_VERSION}
    build: ./app/geoserver
    container_name: ${COMPOSE_PROJECT_NAME}_geoserver
    hostname: ${COMPOSE_PROJECT_NAME}_geoserver
    networks:
      - proxy_dev
    volumes:
      - geodatadir:/geodatadir/
    environment:
      - INITIAL_MEMORY=${INITIAL_MEMORY}
      - MAXIMUM_MEMORY=${MAXIMUM_MEMORY}
      - HTTPS_HOST=
      - HTTPS_PORT=
      - HTTP_HOST=localhost
      - HTTP_PORT=80
      - ADMIN_USERNAME=${ADMIN_USERNAME}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.${COMPOSE_PROJECT_NAME}_geoserver.loadBalancer.server.port=8080"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}_geoserver.rule=Host(`${DOMAIN_NAME}`) && PathPrefix(`/geoserver`)"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}_geoserver.entrypoints=web"
    depends_on:
      - db
    restart: on-failure

  db:
    image: ${DOCKER_ID}/${COMPOSE_PROJECT_NAME}:db-${PROJECT_VERSION}
    build: ./app/database
    container_name: ${COMPOSE_PROJECT_NAME}_db
    hostname: ${COMPOSE_PROJECT_NAME}_db
    networks:
      - proxy_dev
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB_NAME=${COMPOSE_PROJECT_NAME}
      - DATABASE_URL=postgis://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${COMPOSE_PROJECT_NAME}
    volumes:
      - postgres_data:/var/lib/postgresql/data/
      # uncomment to enable remote connections to postgres
    ports:
      - "${POSTGRES_OUTER_PORT}:5432"
    restart: on-failure

  api:
    image: ${DOCKER_ID}/${COMPOSE_PROJECT_NAME}:api-${PROJECT_VERSION}
    build:
      context: ./app/api
    container_name: ${COMPOSE_PROJECT_NAME}_api
    hostname: ${COMPOSE_PROJECT_NAME}_api
    networks:
      - proxy_dev
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB_NAME=${COMPOSE_PROJECT_NAME}
      - S3_ACCESS_KEY=${S3_ACCESS_KEY}
      - S3_SECRET_KEY=${S3_SECRET_KEY}
      - S3_REGION=${S3_REGION}
      - S3_BUCKET=${S3_BUCKET}
      - AWS_CLOUDFRONT_URL=${AWS_CLOUDFRONT_URL}
      - NODE_ENV=${API_ENVIRONMENT}
      - JWT_SECRET=${API_JWT_SECRET}
    volumes:
      - /app/node_modules
      - ./app/api:/app
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}_api.rule=Host(`${DOMAIN_NAME}`) && PathPrefix(`/api`)"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}_api.entrypoints=web"
      - "traefik.http.services.${COMPOSE_PROJECT_NAME}_api.loadBalancer.server.port=3000"

  pgdumper:
    image: ${DOCKER_ID}/${COMPOSE_PROJECT_NAME}:pgdumper-${PROJECT_VERSION}
    build: ./app/pgdumper
    container_name: ${COMPOSE_PROJECT_NAME}_pgdumper
    hostname: ${COMPOSE_PROJECT_NAME}_pgdumper
    networks:
      - proxy_dev
    volumes:
      - pgdumps:/pgdumps/
    restart: on-failure
    environment:
      - DATABASE=${COMPOSE_PROJECT_NAME}
      - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${COMPOSE_PROJECT_NAME}

  rclone:
    image: ${DOCKER_ID}/${COMPOSE_PROJECT_NAME}:rclone-${PROJECT_VERSION}
    build: ./app/rclone
    container_name: ${COMPOSE_PROJECT_NAME}_rclone
    hostname: ${COMPOSE_PROJECT_NAME}_rclone
    networks:
      - proxy_dev
    environment:
      - S3_ACCESS_KEY=${S3_ACCESS_KEY}
      - S3_SECRET_KEY=${S3_SECRET_KEY}
      - S3_REGION=${S3_REGION}
      - S3_BUCKET=${S3_BUCKET}
    volumes:
      - pgdumps:/pgdumps/
      - geodatadir:/geodatadir/
    restart: on-failure
